@startuml Consultorio
package Clinica
{
   
    
    package Inventario
    {

        interface IInsumo {
            Nombre: string
            Cantidad:int
            AddCantidad(int):void
            VerCantidad():int
            RestarCantidad(int):void
        }
        class Medicamento {
            - nombre: string
            - cantidad:int
            + AddCantidad(int):void
            + VerCantidad():int
            + RestarCantidad(int):void
        }
        class Desechables {
            - nombre: string
            - cantidad:int
            + AddCantidad(int):void
            + VerCantidad():int
            + RestarCantidad(int):void
        }
    }
    

    enum Sexo{
        MASCULINO
        FEMENINO
        OTRO
    }
    enum Prevision{
        FONASA
        COLMENA
        CRUZBLANCA
        BANMEDICA
        CONSALUD
        FUNDACION_BANCO_DEL_ESTADO
        VIDA_TRES
        NUEVA_MAS_VIDA
    }

    enum AFP{
        CAPITAL
        HABITAT
        UNO
        CUPRUM
        MODELO
        PLANVITAL
        PROVIDA
    }
        class Persona
        {
        - rut: int
        - digitoVerificador: int
        - sexo: Sexo
        - fechaNacimiento:DateTime
        - edad:int
        - direccion: string
        - telefono: int
        - prevision: Prevision
        - AFP: AFP
        + Rut: int
        + DigitoVerificador: int
        + Sexo: Sexo
        + FechaNacimiento:DateTime
        + Edad:int
        + Direccion: string
        + Telefono: int
        + Prevision: Prevision
        + AFP: AFP
        }

        package TrabajadoresExt
        {
        interface ITrabajadoresExternos{
            EmpresaContratista: string
        }
         class Limpieza{
            - empresaContratista:string
            + EmpresaContratista: string
         }

        class Seguridad{
            - empresaContratista:string
            + EmpresaContratista: string
        }
        }
        package Clientes
        {
            interface ICliente{
            MotivaDeConsulta:string
            fechaAtencion: DateTime
        }
        enum GrupoSanguineo
        {
            A
            B
            AB
            O
        }
        class FichaMedica
        {
          - grupoSanguineo: GrupoSanguineo
          - antecedentes: string
          - alergias: string
          - observaciones: string
          + GrupoSanguineo: GrupoSanguineo
          + Antecedentes: string
          + Alergias: string
          + Observaciones: string
        }

        enum Relacion{
            PADRE
            MADRE
            HIJO
            HIJA
            OTRO
        }
         class Paciente{
            - motivoDeConsulta: string
            - tieneTutor: bool
            - tutor: Tutor
            - fechaAtencion: DateTime
            - medicoAtiende: Medico
            - ficha:FichaMedica
            + CambiarFechaAtencion(DateTime): void
            + Tutor: Tutor
            + TieneTutor: bool
            + MotivaDeConsulta:string
            + FechaAtencion: DateTime
            + MedicoAtiende: Medico
            + Ficha: Ficha
        }
        class Tutor{
            - relacionPaciente: Relacion
            + RelacionPaciente: Relacion
        }
        }
        

        
        package Usuarios
        {
            interface IUsuario
            {
                LogIn(string,string):void
                UserName:string
                Password:string
            }
            class Secretario{
                -userName: string
                -password: string
                + LogIn(string,string):void
                + UserName:string
                + Password:string
                + A単adirHoraPaciente(Paciente):void
                + ElimHoraPaciente(Paciente): void
                + MarcarLlegadaMedico(Medico):void
                + MarcarTurnoTExt(ITrabajadoresExternos):void
                + A単adirInsumo(IInsumo): void
                'Preguntar al profe sobre quien deberia tener metodo de a単adir a infraestructura, si la inf o el que hace la cuenta de las personas es decir el secretario
                + A単adirPersonasInf():void
                + ElimPersonaInf():void
            }

            class Medico{
                - userName:string
                - password: string
                - pacientesAAtender: List<Paciente>
                - horasDisponibles: List<DateTime>
                - boxAtiende: Box
                + boxAtiende: Box
                + HorasDisponibles: List<DateTime>
                + PacientesAAtender: List<Paciente>
                + LogIn(string,string):void
                + UserName:string
                + Password:string
                + AtenderHoraPaciente(Paciente): void
                + IngresarFicha(FichaMedica): void
                + ModificarFicha(FichaMedica): void
                + EliminarFicha(FichaMedica): void
            }

          
        }
        package Infraestructura
         {
             interface IInfraestructura{
                 CapacidadPersonasMax: int
                 ContadorPersonasActuales:int
                 AddPersonaActual(int):void
                 EliminarPersonaActual(int):void
             }
             class Box{
                 - medicoDeTurno: Medico
                 - capacidadPersonasMax: int
                 - numeroBox: int
                 + NumeroBox: int
                 + CambioDeTurno(Medico):void
                 + LimpiarBox(List<Limipieza>):void
                 + CapacidadPersonasMax: int
                 + AddPersonaActual(int):void
                 + EliminarPersonaActual(int):void
             }
             class SalaDeEspera {
                 - seguridadDeTurno: List<Seguridad>
                 - capacidadPersonasMax: int
                 + CapacidadPersonasMax: int
                 + CambioDeTurno(List<Seguridad>): void
                 + LimpiezaSala(List<Limpiea>): void
                 + AddPersonaActual(int):void
                 + EliminarPersonaActual(int):void
             }
             

         }
        'Relaciones
        'Herencias
        
        Persona<|-- Tutor
        Persona<|-- Paciente
        Persona<|-- Secretario
        Persona<|-- Medico
        Persona<|-- Limpieza
        Persona<|-- Seguridad



        'Composicion
        '(Se tienen en campo y no existen sin estar dentro de la clase)
        Paciente *-- Tutor
        Box *-- Medicamento
        Box *-- Desechables
        Paciente *-- FichaMedica
        'Agregacion
        '(Se tienen en campo pero existen independiente)
        Box o-- Medico
        SalaDeEspera o-- Seguridad
        Box  o-- Limpieza
        
        'Asociacion
        '(Interactuan pero son independientes, ej: pueden estar en metodo de el objeto)
        Medico -- Paciente
        Medico -- FichaMedica
        Medico -- IInsumo
        Secretario -- IInsumo
        Secretario -- Paciente
        Secretario -- Medico
        Secretario -- IInfraestructura
        'Interfaces:

        
        'Interfaz T externos
        ITrabajadoresExternos <|.. Limpieza
        ITrabajadoresExternos <|.. Seguridad
        'Interfaz Usuarios
        IUsuario <|.. Secretario
        IUsuario <|.. Medico
        'Interfaz Clientes
        ICliente <|.. Paciente
        'Interfaz Insumos
        IInsumo <|.. Medicamento
        IInsumo <|.. Desechables
        'Interfaz Infraestructura
        IInfraestructura <|.. Box
        IInfraestructura <|.. SalaDeEspera
        
    
    
}
@enduml